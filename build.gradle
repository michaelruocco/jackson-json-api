plugins {
    id 'java'
    id 'com.diffplug.gradle.spotless' version '3.25.0'
    id 'com.github.ben-manes.versions' version '0.26.0'
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.8.4'
}

apply plugin: 'jacoco'
apply plugin: 'maven'
apply plugin: 'signing'

group 'com.github.michaelruocco'
version '1.0.0'

sourceCompatibility = 8
targetCompatibility = 8

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.5.2'

    compileOnly 'org.projectlombok:lombok:1.18.10'
    testCompileOnly 'org.projectlombok:lombok:1.18.10'
    annotationProcessor 'org.projectlombok:lombok:1.18.10'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.10'

    compile 'com.fasterxml.jackson.core:jackson-annotations:2.10.0'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.10.0'

    testCompile 'org.assertj:assertj-core:3.13.2'
    testCompile 'nl.jqno.equalsverifier:equalsverifier:3.1.10'
    testCompile 'com.github.michaelruocco:file-loader:5.0.1'
    testCompile 'net.javacrumbs.json-unit:json-unit-assertj:2.9.0'
    testCompile 'org.slf4j:slf4j-simple:1.7.28'

}

test {
    useJUnitPlatform()
}

spotless {
    java {
        removeUnusedImports()
        trimTrailingWhitespace()
        indentWithSpaces(4)
        endWithNewline()

        replace      'Not enough space after if', 'if(', 'if ('
        replaceRegex 'Too much space after if', 'if +\\(', 'if ('

        replace      'Not enough space after for', 'for(', 'for ('
        replaceRegex 'Too much space after for', 'for +\\(', 'for ('

        replace      'Not enough space after while', 'while(', 'while ('
        replaceRegex 'Too much space after while', 'while +\\(', 'while ('
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

signing {
    sign configurations.archives
}
signArchives.enabled = gradle.startParameter.taskNames.contains("uploadArchives")

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                packaging 'jar'
                name 'File Loader'
                description 'Code library to easily load files and file from the classpath or file system file'
                groupId 'com.github.michaelruocco'
                artifactId 'file-loader'
                version '5.0.1'
                url 'https://github.com/michaelruocco/file-loader'

                developers {
                    developer {
                        id 'mruoc'
                        name 'Michael Ruocco'
                        email 'michael.ruocco@hotmail.com'
                    }
                }

                scm {
                    connection 'scm:git:git@github.com/michaelruocco/file-loader.git'
                    developerConnection 'scm:git:git@github.com/michaelruocco/file-loader.git'
                    url 'git@github.com/michaelruocco/file-loader.git'
                }

                licenses {
                    license {
                        name 'BSD License'
                        url 'http://www.opensource.org/licenses/bsd-license.php'
                        distribution 'repo'
                    }
                }
            }
        }
    }
}