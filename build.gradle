plugins {
    id 'java-library'
    id 'java-test-fixtures'
    id 'com.diffplug.gradle.spotless' version '3.27.2'
    id 'com.github.ben-manes.versions' version '0.28.0'
    id 'jacoco'
    id 'com.jfrog.bintray' version '1.8.4'
    id 'com.jfrog.artifactory' version '4.14.1'
    id 'pl.allegro.tech.build.axion-release' version '1.11.0'
}

apply plugin: 'jacoco'
apply plugin: 'maven-publish'

group 'com.github.michaelruocco'

scmVersion {
    versionCreator 'versionWithBranch'
    tag {
        prefix = 'jackson-json-api'
    }
}
project.version = scmVersion.version

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

ext {
    lombokVersion = '1.18.12'
}

dependencies {
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    api 'com.fasterxml.jackson.core:jackson-databind:2.10.3'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.10.3'
    implementation 'org.apache.commons:commons-collections4:4.4'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.6.0'
    testImplementation 'org.assertj:assertj-core:3.15.0'
    testImplementation 'nl.jqno.equalsverifier:equalsverifier:3.1.13'
    testImplementation 'com.github.michaelruocco:file-loader:5.0.1'
    testImplementation 'net.javacrumbs.json-unit:json-unit-assertj:2.14.0'
    testImplementation 'org.slf4j:slf4j-simple:1.7.30'
    testImplementation 'org.mockito:mockito-core:3.3.3'

    testFixturesCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testFixturesAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
}

test {
    useJUnitPlatform()
}

spotless {
    java {
        removeUnusedImports()
        trimTrailingWhitespace()
        indentWithSpaces(4)
        endWithNewline()

        replace 'Not enough space after if', 'if(', 'if ('
        replaceRegex 'Too much space after if', 'if +\\(', 'if ('

        replace 'Not enough space after for', 'for(', 'for ('
        replaceRegex 'Too much space after for', 'for +\\(', 'for ('

        replace 'Not enough space after while', 'while(', 'while ('
        replaceRegex 'Too much space after while', 'while +\\(', 'while ('
    }
}

jacoco {
    toolVersion = '0.8.5'
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

def pomConfig = {
    licenses {
        license {
            name 'BSD License'
            url 'http://www.opensource.org/licenses/bsd-license.php'
            distribution 'repo'
        }
    }
    developers {
        developer {
            id 'mruoc'
            name 'Michael Ruocco'
            email 'michael.ruocco@hotmail.com'
        }
    }

    scm {
        url 'https://github.com/michaelruocco/jackson-json-api'
    }
}

publishing {
    publications {
        mavenPublication(MavenPublication) {
            from components.java
            artifact sourcesJar {
                classifier "sources"
            }
            artifact javadocJar {
                classifier "javadoc"
            }
            groupId project.group
            artifactId 'jackson-json-api'
            version project.version
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'Library to help building API endpoints using JSON API with Jackson')
                root.appendNode('name', 'jackson-json-api')
                root.appendNode('url', 'https://github.com/michaelruocco/jackson-json-api')
                root.children().last() + pomConfig
            }
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    publications = ['mavenPublication']
    publish = true
    
    pkg {
        repo = 'maven'
        name = 'jackson-json-api'
        userOrg = 'michaelruocco'
        licenses = ['bsd']
        vcsUrl = 'https://github.com/michaelruocco/jackson-json-api.git'
        version {
            name = project.version
            desc = project.version
            released = new Date()
            gpg {
                sign = true
            }
            mavenCentralSync {
                sync = true
            }
        }
    }
}

artifactory {
    contextUrl = 'http://oss.jfrog.org'
    publish {
        repository {
            repoKey = 'oss-snapshot-local'
            username = System.getenv('BINTRAY_USER')
            password = System.getenv('BINTRAY_KEY')
        }
        defaults {
            publications('mavenPublication')
            publishArtifacts = true
            publishPom = true
        }
    }
    resolve {
        repoKey = 'jcenter'
    }
    clientConfig.info.setBuildNumber(System.getProperty('build.number'))
}

dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}